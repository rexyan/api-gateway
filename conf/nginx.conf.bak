
#user  nobody;
worker_processes  1;

error_log logs/error.log;
# error_log  logs/error.log  notice;
# error_log  logs/error.log  info;

#pid        logs/nginx.pid;


events {
    worker_connections  1024;
}


http {
    resolver 114.114.114.114;

	lua_package_path  "$prefix/src/?.lua;;";
    lua_shared_dict limit_req_store 100m;
    lua_shared_dict limit_conn_store 100m;

	init_by_lua_block {
        require "resty.core"
        api_gateway = require("init")
        api_gateway.http_init()
    }

    init_worker_by_lua_block {
        api_gateway.http_init_worker()
    }

    underscores_in_headers on;
    include       mime.types;
    default_type  application/json;
    sendfile        on;
    keepalive_timeout  65;

    upstream hr_api_backend {
        server 127.0.0.1:5000;
        # balancer_by_lua_block {
        #     api_gateway.http_balancer_phase()
        # }
        keepalive 320;
    }

    upstream cas_api_backend {
        server 127.0.0.1:9099;
        # balancer_by_lua_block {
        #     api_gateway.http_balancer_phase()
        # }
        keepalive 320;
    }

    server {
        listen       8889;
        server_name  localhost;
        
        lua_code_cache off;
		

        location /cas {
			set $upstream_scheme             'http';
            set $upstream_host               $http_host;
            set $upstream_upgrade            '';
            set $upstream_connection         '';

            access_by_lua_block {
                api_gateway.http_access_phase()
            }

            proxy_http_version 1.1;
            proxy_set_header   Host              $upstream_host;
            proxy_set_header   Upgrade           $upstream_upgrade;
            proxy_set_header   Connection        $upstream_connection;
            proxy_set_header   X-Real-IP         $remote_addr;
            proxy_pass_header  Server;
            proxy_pass_header  Date;

            ### the following x-forwarded-* headers is to send to upstream server

            set $var_x_forwarded_for        $remote_addr;
            set $var_x_forwarded_proto      $scheme;
            set $var_x_forwarded_host       $host;
            set $var_x_forwarded_port       $server_port;

            if ($http_x_forwarded_for != "") {
                set $var_x_forwarded_for "${http_x_forwarded_for}, ${realip_remote_addr}";
            }
            if ($http_x_forwarded_proto != "") {
                set $var_x_forwarded_proto $http_x_forwarded_proto;
            }
            if ($http_x_forwarded_host != "") {
                set $var_x_forwarded_host $http_x_forwarded_host;
            }
            if ($http_x_forwarded_port != "") {
                set $var_x_forwarded_port $http_x_forwarded_port;
            }

            proxy_set_header   X-Forwarded-For      $var_x_forwarded_for;
            proxy_set_header   X-Forwarded-Proto    $var_x_forwarded_proto;
            proxy_set_header   X-Forwarded-Host     $var_x_forwarded_host;
            proxy_set_header   X-Forwarded-Port     $var_x_forwarded_port;

            # proxy pass
            rewrite ^/cas/(.*)$ /cas/$1 break;
            proxy_pass         $upstream_scheme://cas_api_backend;

            header_filter_by_lua_block {
                api_gateway.http_header_filter_phase()
            }

            body_filter_by_lua_block {
                api_gateway.http_body_filter_phase()
            }

            log_by_lua_block {
                api_gateway.http_log_phase()
            }
		}

        location /static {
            # proxy pass
            # rewrite ^/static/(.*)$ /static/$1 break;
            proxy_pass         http://127.0.0.1:9099;
        }

        location /api {
			set $upstream_scheme             'http';
            set $upstream_host               $http_host;
            set $upstream_upgrade            '';
            set $upstream_connection         '';

            access_by_lua_block {
                api_gateway.http_access_phase()
            }

            proxy_http_version 1.1;
            proxy_set_header   Host              $upstream_host;
            proxy_set_header   Upgrade           $upstream_upgrade;
            proxy_set_header   Connection        $upstream_connection;
            proxy_set_header   X-Real-IP         $remote_addr;
            proxy_pass_header  Server;
            proxy_pass_header  Date;

            ### the following x-forwarded-* headers is to send to upstream server

            set $var_x_forwarded_for        $remote_addr;
            set $var_x_forwarded_proto      $scheme;
            set $var_x_forwarded_host       $host;
            set $var_x_forwarded_port       $server_port;

            if ($http_x_forwarded_for != "") {
                set $var_x_forwarded_for "${http_x_forwarded_for}, ${realip_remote_addr}";
            }
            if ($http_x_forwarded_proto != "") {
                set $var_x_forwarded_proto $http_x_forwarded_proto;
            }
            if ($http_x_forwarded_host != "") {
                set $var_x_forwarded_host $http_x_forwarded_host;
            }
            if ($http_x_forwarded_port != "") {
                set $var_x_forwarded_port $http_x_forwarded_port;
            }

            proxy_set_header   X-Forwarded-For      $var_x_forwarded_for;
            proxy_set_header   X-Forwarded-Proto    $var_x_forwarded_proto;
            proxy_set_header   X-Forwarded-Host     $var_x_forwarded_host;
            proxy_set_header   X-Forwarded-Port     $var_x_forwarded_port;

            # proxy pass
            rewrite ^/api/(.*)$ /api/$1 break;
            proxy_pass         $upstream_scheme://hr_api_backend;

            header_filter_by_lua_block {
                api_gateway.http_header_filter_phase()
            }

            body_filter_by_lua_block {
                api_gateway.http_body_filter_phase()
            }

            log_by_lua_block {
                api_gateway.http_log_phase()
            }
		}

        location / {
            try_files $uri $uri/ @router;
            index  index.html index.htm;
        }

        error_page   500 502 503 504  /50x.html;
        location = /50x.html {
            root   html;
        }

        
    }

}
